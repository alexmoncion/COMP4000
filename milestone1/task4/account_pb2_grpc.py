# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import account_pb2 as account__pb2


class ReplyStub(object):
    """The Account service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Creation = channel.unary_unary(
                '/Reply/Creation',
                request_serializer=account__pb2.CreationRequest.SerializeToString,
                response_deserializer=account__pb2.CreationReply.FromString,
                )
        self.Login = channel.unary_unary(
                '/Reply/Login',
                request_serializer=account__pb2.LoginRequest.SerializeToString,
                response_deserializer=account__pb2.LoginReply.FromString,
                )
        self.Delete = channel.unary_unary(
                '/Reply/Delete',
                request_serializer=account__pb2.DeleteRequest.SerializeToString,
                response_deserializer=account__pb2.DeleteReply.FromString,
                )
        self.Update = channel.unary_unary(
                '/Reply/Update',
                request_serializer=account__pb2.UpdateRequest.SerializeToString,
                response_deserializer=account__pb2.UpdateReply.FromString,
                )


class ReplyServicer(object):
    """The Account service definition
    """

    def Creation(self, request, context):
        """Sends a confirmation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Creation': grpc.unary_unary_rpc_method_handler(
                    servicer.Creation,
                    request_deserializer=account__pb2.CreationRequest.FromString,
                    response_serializer=account__pb2.CreationReply.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=account__pb2.LoginRequest.FromString,
                    response_serializer=account__pb2.LoginReply.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=account__pb2.DeleteRequest.FromString,
                    response_serializer=account__pb2.DeleteReply.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=account__pb2.UpdateRequest.FromString,
                    response_serializer=account__pb2.UpdateReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reply', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reply(object):
    """The Account service definition
    """

    @staticmethod
    def Creation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/Creation',
            account__pb2.CreationRequest.SerializeToString,
            account__pb2.CreationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/Login',
            account__pb2.LoginRequest.SerializeToString,
            account__pb2.LoginReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/Delete',
            account__pb2.DeleteRequest.SerializeToString,
            account__pb2.DeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/Update',
            account__pb2.UpdateRequest.SerializeToString,
            account__pb2.UpdateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
