# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import account_pb2 as account__pb2


class ReplyStub(object):
    """The Account service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MountFs = channel.unary_unary(
                '/Reply/MountFs',
                request_serializer=account__pb2.FilesystemRequest.SerializeToString,
                response_deserializer=account__pb2.FilesystemReply.FromString,
                )
        self.ls = channel.unary_unary(
                '/Reply/ls',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.opendir = channel.unary_unary(
                '/Reply/opendir',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.getattr = channel.unary_unary(
                '/Reply/getattr',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.stat = channel.unary_unary(
                '/Reply/stat',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.mkdir = channel.unary_unary(
                '/Reply/mkdir',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.fullPath = channel.unary_unary(
                '/Reply/fullPath',
                request_serializer=account__pb2.FullPathReq.SerializeToString,
                response_deserializer=account__pb2.FullPathRep.FromString,
                )
        self.access = channel.unary_unary(
                '/Reply/access',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.chmod = channel.unary_unary(
                '/Reply/chmod',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.chown = channel.unary_unary(
                '/Reply/chown',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.readdir = channel.unary_unary(
                '/Reply/readdir',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.readlink = channel.unary_unary(
                '/Reply/readlink',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.mknod = channel.unary_unary(
                '/Reply/mknod',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.rmdir = channel.unary_unary(
                '/Reply/rmdir',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.statfs = channel.unary_unary(
                '/Reply/statfs',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.unlink = channel.unary_unary(
                '/Reply/unlink',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.symlink = channel.unary_unary(
                '/Reply/symlink',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.rename = channel.unary_unary(
                '/Reply/rename',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.link = channel.unary_unary(
                '/Reply/link',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.utimens = channel.unary_unary(
                '/Reply/utimens',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.open = channel.unary_unary(
                '/Reply/open',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.create = channel.unary_unary(
                '/Reply/create',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.read = channel.unary_unary(
                '/Reply/read',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.write = channel.unary_unary(
                '/Reply/write',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.truncate = channel.unary_unary(
                '/Reply/truncate',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.flush = channel.unary_unary(
                '/Reply/flush',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.release = channel.unary_unary(
                '/Reply/release',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )
        self.fsync = channel.unary_unary(
                '/Reply/fsync',
                request_serializer=account__pb2.ClientSysCallRequest.SerializeToString,
                response_deserializer=account__pb2.ClientSysCallReply.FromString,
                )


class ReplyServicer(object):
    """The Account service definition
    """

    def MountFs(self, request, context):
        """Sends a confirmation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def opendir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getattr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fullPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def access(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chmod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mknod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def statfs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def symlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def link(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def utimens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def truncate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MountFs': grpc.unary_unary_rpc_method_handler(
                    servicer.MountFs,
                    request_deserializer=account__pb2.FilesystemRequest.FromString,
                    response_serializer=account__pb2.FilesystemReply.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'opendir': grpc.unary_unary_rpc_method_handler(
                    servicer.opendir,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'getattr': grpc.unary_unary_rpc_method_handler(
                    servicer.getattr,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'stat': grpc.unary_unary_rpc_method_handler(
                    servicer.stat,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'fullPath': grpc.unary_unary_rpc_method_handler(
                    servicer.fullPath,
                    request_deserializer=account__pb2.FullPathReq.FromString,
                    response_serializer=account__pb2.FullPathRep.SerializeToString,
            ),
            'access': grpc.unary_unary_rpc_method_handler(
                    servicer.access,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'chmod': grpc.unary_unary_rpc_method_handler(
                    servicer.chmod,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'chown': grpc.unary_unary_rpc_method_handler(
                    servicer.chown,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'readdir': grpc.unary_unary_rpc_method_handler(
                    servicer.readdir,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'readlink': grpc.unary_unary_rpc_method_handler(
                    servicer.readlink,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'mknod': grpc.unary_unary_rpc_method_handler(
                    servicer.mknod,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.rmdir,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'statfs': grpc.unary_unary_rpc_method_handler(
                    servicer.statfs,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'unlink': grpc.unary_unary_rpc_method_handler(
                    servicer.unlink,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'symlink': grpc.unary_unary_rpc_method_handler(
                    servicer.symlink,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'rename': grpc.unary_unary_rpc_method_handler(
                    servicer.rename,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'link': grpc.unary_unary_rpc_method_handler(
                    servicer.link,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'utimens': grpc.unary_unary_rpc_method_handler(
                    servicer.utimens,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'open': grpc.unary_unary_rpc_method_handler(
                    servicer.open,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'read': grpc.unary_unary_rpc_method_handler(
                    servicer.read,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'truncate': grpc.unary_unary_rpc_method_handler(
                    servicer.truncate,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'flush': grpc.unary_unary_rpc_method_handler(
                    servicer.flush,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'release': grpc.unary_unary_rpc_method_handler(
                    servicer.release,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
            'fsync': grpc.unary_unary_rpc_method_handler(
                    servicer.fsync,
                    request_deserializer=account__pb2.ClientSysCallRequest.FromString,
                    response_serializer=account__pb2.ClientSysCallReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reply', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reply(object):
    """The Account service definition
    """

    @staticmethod
    def MountFs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/MountFs',
            account__pb2.FilesystemRequest.SerializeToString,
            account__pb2.FilesystemReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/ls',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def opendir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/opendir',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getattr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/getattr',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/stat',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/mkdir',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fullPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/fullPath',
            account__pb2.FullPathReq.SerializeToString,
            account__pb2.FullPathRep.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/access',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def chmod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/chmod',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def chown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/chown',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/readdir',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/readlink',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mknod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/mknod',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/rmdir',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def statfs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/statfs',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/unlink',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def symlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/symlink',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/rename',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def link(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/link',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def utimens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/utimens',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/open',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/create',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/read',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/write',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def truncate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/truncate',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/flush',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/release',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reply/fsync',
            account__pb2.ClientSysCallRequest.SerializeToString,
            account__pb2.ClientSysCallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
